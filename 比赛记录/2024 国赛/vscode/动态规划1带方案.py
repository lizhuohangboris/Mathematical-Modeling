# 定义每种情境下的成本和损失数据
situations = {
    1: {"零配件1次品率": 0.10, "零配件1检测成本": 2, "零配件2次品率": 0.10, "零配件2检测成本": 3,
        "装配成本": 6, "成品次品率": 0.10, "成品检测成本": 3, "市场售价": 56, "调换损失": 6, "拆解费用": 5},
    2: {"零配件1次品率": 0.20, "零配件1检测成本": 2, "零配件2次品率": 0.20, "零配件2检测成本": 3,
        "装配成本": 6, "成品次品率": 0.20, "成品检测成本": 3, "市场售价": 56, "调换损失": 6, "拆解费用": 5},
    3: {"零配件1次品率": 0.10, "零配件1检测成本": 2, "零配件2次品率": 0.10, "零配件2检测成本": 3,
        "装配成本": 6, "成品次品率": 0.10, "成品检测成本": 3, "市场售价": 56, "调换损失": 30, "拆解费用": 5},
    4: {"零配件1次品率": 0.20, "零配件1检测成本": 1, "零配件2次品率": 0.20, "零配件2检测成本": 1,
        "装配成本": 6, "成品次品率": 0.20, "成品检测成本": 2, "市场售价": 56, "调换损失": 30, "拆解费用": 5},
    5: {"零配件1次品率": 0.10, "零配件1检测成本": 8, "零配件2次品率": 0.20, "零配件2检测成本": 1,
        "装配成本": 6, "成品次品率": 0.10, "成品检测成本": 2, "市场售价": 56, "调换损失": 10, "拆解费用": 5},
    6: {"零配件1次品率": 0.05, "零配件1检测成本": 2, "零配件2次品率": 0.05, "零配件2检测成本": 3,
        "装配成本": 6, "成品次品率": 0.05, "成品检测成本": 3, "市场售价": 56, "调换损失": 10, "拆解费用": 40}
}

# 定义递归动态规划函数
def max_profit(situation, i, j, k):
    # 获取当前情境下的数据
    data = situations[situation]
    
    # 如果检测零配件1，计算检测成本和可能的次品损失
    if i == 1:
        cost_i = data["零配件1检测成本"]
        loss_i = data["零配件1次品率"] * data["市场售价"]
    else:
        cost_i = 0
        loss_i = 0

    # 如果检测零配件2，计算检测成本和可能的次品损失
    if j == 1:
        cost_j = data["零配件2检测成本"]
        loss_j = data["零配件2次品率"] * data["市场售价"]
    else:
        cost_j = 0
        loss_j = 0

    # 如果检测成品，计算检测成本和可能的拆解或调换成本
    if k == 1:
        cost_k = data["成品检测成本"]
        loss_k = min(data["拆解费用"], data["调换损失"])
    else:
        cost_k = 0
        loss_k = data["调换损失"]

    # 总利润计算
    total_cost = cost_i + cost_j + cost_k + data["装配成本"] + loss_i + loss_j + loss_k
    total_revenue = data["市场售价"] - total_cost
    return total_revenue

# 测试每个情境的最优决策组合
for situation in range(1, 7):
    # 遍历所有可能的检测和不检测组合
    best_profit = float('-inf')
    best_combination = None

    for i in [0, 1]:  # 0: 不检测, 1: 检测
        for j in [0, 1]:
            for k in [0, 1]:
                profit = max_profit(situation, i, j, k)
                if profit > best_profit:
                    best_profit = profit
                    best_combination = (i, j, k)
    
    print(f"情境 {situation} 的最优决策组合为: {'检测零配件1' if best_combination[0] else '不检测零配件1'}, "
          f"{'检测零配件2' if best_combination[1] else '不检测零配件2'}, "
          f"{'检测成品' if best_combination[2] else '不检测成品'}; 最优总利润为: {best_profit}")
